{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\empan\\\\Desktop\\\\CONTEUDO_DA_FACUL\\\\Trabalho de conclus\\xE3o de curso\\\\Mate.gg\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './Chat.css';\n\n//Chat server\nimport io from 'socket.io-client';\n\n//Uploads\nimport { uploads } from '../utils/config';\n\n//Icons\nimport { BsX, BsChatDots } from 'react-icons/bs';\n\n//Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearNewUserChat, profile } from '../slices/userSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    user,\n    newUserChat,\n    newUserChatPhoto\n  } = useSelector(state => state.user);\n  const chatMessagesRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [unreadMessagesCount, setUnreadMessagesCount] = useState(1);\n  const [chatMessages, setChatMessages] = useState({});\n  const [messageId, setMessageId] = useState(null);\n  const [newMessage, setNewMessage] = useState(null);\n  const [userId, setUserId] = useState(null);\n  useEffect(() => {\n    dispatch(profile());\n  }, [dispatch]);\n\n  //Create and set the socket variable, and sets the disconnection from socket when the component is dismounted\n  useEffect(() => {\n    const newSocket = io('http://localhost:4000', {\n      withCredentials: true\n    });\n    setSocket(newSocket);\n    return () => {\n      //Disconnect from server when Chat.js is dismounted\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n\n  //Set the userId variable when the store returns the user object\n  useEffect(() => {\n    if (user) {\n      setUserId(user.id);\n    }\n  }, [user]);\n\n  //Joins the client in the server when the socket and the userId are ready\n  useEffect(() => {\n    if (userId && socket) {\n      socket.emit('join', userId);\n    }\n  }, [userId, socket]);\n\n  //Emits the command to search for messages and sets the manipulator to when messages are received\n  useEffect(() => {\n    if (userId && socket) {\n      socket.emit('get-messages');\n      socket.on('messages', messages => {\n        setChatMessages(messages);\n      });\n    }\n    return () => {\n      //Sets the manipulator off when the component gets dismounted\n      if (socket) {\n        socket.off('messages');\n      }\n    };\n  }, [userId, socket]);\n\n  //Toggle open/close chat\n  const toggleChat = () => {\n    if (user.email) {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  //Scrolls the chat till the end when it opens\n  useEffect(() => {\n    if (isOpen) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [isOpen]);\n\n  //Starts a new chat with an user\n  useEffect(() => {\n    console.log(\"NEW USER CHAT MUDOU\");\n    if (newUserChat && newUserChatPhoto && socket) {\n      console.log(\"INICIOU UM NOVO CHAT!\");\n      console.log(\"NEW USER CHAT: \", newUserChat);\n      socket.emit('start-chat', {\n        message: 'Olá, vamos jogar!',\n        targetUser: newUserChat,\n        userPhoto: user.photo,\n        targetPhoto: newUserChatPhoto\n      });\n      dispatch(clearNewUserChat());\n    }\n  }, [newUserChat]);\n\n  //Handles a message change for the message input\n  const handleMessageChange = e => {\n    setNewMessage(e.target.value);\n  };\n\n  //Handles a player in the chat click\n  const handleChatPlayerClick = playerId => {\n    setMessageId(playerId);\n    console.log(\"MessageId: \", messageId);\n  };\n\n  //Handles a message submit from the message input\n  const handleMessageSubmit = e => {\n    if (socket && userId) {\n      const targetUser = messageId;\n      socket.emit('send-message', {\n        message: newMessage,\n        targetUser: targetUser\n      });\n      setNewMessage(null);\n    }\n  };\n  const getDateFromMilliseconds = stringMilliseconds => {\n    const milliseconds = parseInt(stringMilliseconds, 10);\n    const date = new Date(milliseconds);\n    const minute = date.getMinutes();\n    const hour = date.getHours();\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const formattedDate = `${day}/${month}/${year} ${hour}:${minute}`;\n    return formattedDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-component\",\n    className: `${isOpen ? 'open' : 'closed'}`,\n    children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"chat-close-button\",\n        onClick: toggleChat,\n        children: /*#__PURE__*/_jsxDEV(BsX, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"chat-players\",\n          children: chatMessages && messageId && Object.keys(chatMessages).map((key, index, messageIds) => (console.log(chatMessages[key].photo), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"chat-players-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: chatMessages[key].photo ? `${uploads}/users/${chatMessages[key].photo}` : `${uploads}/users/user.png`,\n              alt: `user-${key}-photo`,\n              className: \"chat-players-item-image\",\n              onClick: () => handleChatPlayerClick(key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"current-chat\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"current-chat-label\",\n            children: chatMessages && chatMessages[messageId] && chatMessages[messageId].photo ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${uploads}/users/${chatMessages[messageId].photo}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 93\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${uploads}/users/user.png`,\n              alt: 'user-1-photo',\n              id: \"current-chat-label-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 160\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            id: \"chat-messages\",\n            ref: chatMessagesRef,\n            children: [console.log(\"FOTO DO USUÁRIO: \", chatMessages[messageId]), chatMessages && chatMessages[messageId] && Object.keys(chatMessages[messageId]).map((key, index, messageIds) => {\n              if (key != 'photo') {\n                const currentMessage = chatMessages[messageId][key];\n                const isCurrentUserMessage = currentMessage.sender === userId;\n                const nextMessageKey = messageIds[index + 1];\n                const nextMessage = nextMessageKey ? chatMessages[messageId][nextMessageKey] : null;\n                const shouldAddBorderClass = !isCurrentUserMessage && nextMessage && nextMessage.sender !== userId;\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: `chat-item ${isCurrentUserMessage ? 'current-user-message' : 'other-user-message'}\n                        ${shouldAddBorderClass ? 'chat-item-border-bottom' : ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"chat-item-time-label\",\n                    children: getDateFromMilliseconds(key)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 25\n                  }, this), currentMessage.message]\n                }, key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 23\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"message-input\",\n            value: newMessage || '',\n            placeholder: \"Digite aqui...\",\n            onChange: handleMessageChange,\n            onKeyDown: e => {\n              if (e.key === 'Enter') {\n                e.preventDefault(); // Prevent the default form submission\n                handleMessageSubmit(); // Call your submit function here\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chat-button\",\n      onClick: toggleChat,\n      children: [/*#__PURE__*/_jsxDEV(BsChatDots, {\n        id: \"chat-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-unread-messages-count\",\n        children: unreadMessagesCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"VoGLOfRqppf8fRBBNSpf1bynOaM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","uploads","BsX","BsChatDots","useDispatch","useSelector","clearNewUserChat","profile","jsxDEV","_jsxDEV","Chat","_s","dispatch","user","newUserChat","newUserChatPhoto","state","chatMessagesRef","socket","setSocket","isOpen","setIsOpen","unreadMessagesCount","setUnreadMessagesCount","chatMessages","setChatMessages","messageId","setMessageId","newMessage","setNewMessage","userId","setUserId","newSocket","withCredentials","disconnect","id","emit","on","messages","off","toggleChat","email","current","scrollTop","scrollHeight","console","log","message","targetUser","userPhoto","photo","targetPhoto","handleMessageChange","e","target","value","handleChatPlayerClick","playerId","handleMessageSubmit","getDateFromMilliseconds","stringMilliseconds","milliseconds","parseInt","date","Date","minute","getMinutes","hour","getHours","day","getDate","month","getMonth","year","getFullYear","formattedDate","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","key","index","messageIds","src","alt","ref","currentMessage","isCurrentUserMessage","sender","nextMessageKey","nextMessage","shouldAddBorderClass","type","placeholder","onChange","onKeyDown","preventDefault","_c","$RefreshReg$"],"sources":["C:/Users/empan/Desktop/CONTEUDO_DA_FACUL/Trabalho de conclusão de curso/Mate.gg/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './Chat.css';\r\n\r\n//Chat server\r\nimport io from 'socket.io-client';\r\n\r\n//Uploads\r\nimport {uploads} from '../utils/config'\r\n\r\n//Icons\r\nimport { BsX, BsChatDots } from 'react-icons/bs'\r\n\r\n//Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearNewUserChat, profile } from '../slices/userSlice';\r\n\r\nconst Chat = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {user, newUserChat, newUserChatPhoto} = useSelector((state) => state.user);\r\n\r\n  const chatMessagesRef = useRef(null);\r\n\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [unreadMessagesCount, setUnreadMessagesCount] = useState(1);\r\n  const [chatMessages, setChatMessages] = useState({});\r\n  const [messageId, setMessageId] = useState(null);\r\n  const [newMessage, setNewMessage] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    dispatch(profile());\r\n  }, [dispatch])\r\n\r\n  //Create and set the socket variable, and sets the disconnection from socket when the component is dismounted\r\n  useEffect(() => {\r\n    const newSocket = io('http://localhost:4000', {\r\n      withCredentials: true,\r\n    });\r\n    setSocket(newSocket);\r\n\r\n    return () => { //Disconnect from server when Chat.js is dismounted\r\n      if (socket) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  //Set the userId variable when the store returns the user object\r\n  useEffect(() => {\r\n    if (user) {\r\n      setUserId(user.id);\r\n    }\r\n  }, [user]);\r\n\r\n  //Joins the client in the server when the socket and the userId are ready\r\n  useEffect(() => {\r\n    if (userId && socket) {\r\n      socket.emit('join', userId);\r\n    }\r\n  }, [userId, socket]);\r\n\r\n  //Emits the command to search for messages and sets the manipulator to when messages are received\r\n  useEffect(() => {\r\n    if (userId && socket) {\r\n      socket.emit('get-messages');\r\n      socket.on('messages', (messages) => {\r\n        setChatMessages(messages);\r\n      });\r\n    } \r\n\r\n    return () => { //Sets the manipulator off when the component gets dismounted\r\n      if (socket) {\r\n        socket.off('messages');\r\n\r\n      }\r\n    };\r\n  }, [userId, socket]);\r\n\r\n  //Toggle open/close chat\r\n  const toggleChat = () => {\r\n    if(user.email) {\r\n      setIsOpen(!isOpen);\r\n    }\r\n  };\r\n\r\n  //Scrolls the chat till the end when it opens\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [isOpen]);\r\n\r\n  //Starts a new chat with an user\r\n  useEffect(() => {\r\n    console.log(\"NEW USER CHAT MUDOU\")\r\n    if(newUserChat && newUserChatPhoto && socket) {\r\n      console.log(\"INICIOU UM NOVO CHAT!\")\r\n      console.log(\"NEW USER CHAT: \", newUserChat)\r\n      socket.emit('start-chat', { message: 'Olá, vamos jogar!', targetUser: newUserChat, userPhoto: user.photo, targetPhoto: newUserChatPhoto});\r\n      dispatch(clearNewUserChat());\r\n    }\r\n  }, [newUserChat])\r\n\r\n  //Handles a message change for the message input\r\n  const handleMessageChange = (e) => {\r\n    setNewMessage(e.target.value);\r\n  };\r\n\r\n  //Handles a player in the chat click\r\n  const handleChatPlayerClick = (playerId) => {\r\n    setMessageId(playerId)\r\n    console.log(\"MessageId: \", messageId)\r\n  };\r\n\r\n  //Handles a message submit from the message input\r\n  const handleMessageSubmit = (e) => {\r\n    if(socket && userId) {\r\n      const targetUser = messageId;\r\n\r\n      socket.emit('send-message', { message: newMessage, targetUser: targetUser});\r\n\r\n      setNewMessage(null)\r\n    }\r\n  };\r\n\r\n  const getDateFromMilliseconds = (stringMilliseconds) => {\r\n    const milliseconds = parseInt(stringMilliseconds, 10);\r\n\r\n    const date = new Date(milliseconds);\r\n\r\n    const minute = date.getMinutes();\r\n    const hour = date.getHours();\r\n    const day = date.getDate();\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n\r\n    const formattedDate = `${day}/${month}/${year} ${hour}:${minute}`;\r\n\r\n    return formattedDate;\r\n  }\r\n\r\n  return (\r\n    <div id='chat-component' className={`${isOpen ? 'open' : 'closed'}`}>\r\n      {isOpen ? (\r\n        <div id=\"chat-window\">\r\n          <button id=\"chat-close-button\" onClick={toggleChat}>\r\n            <BsX/>\r\n          </button>\r\n          <div id='chat-list'>\r\n            <ul id='chat-players'>\r\n              {chatMessages && messageId && Object.keys(chatMessages).map((key, index, messageIds) => (\r\n                console.log(chatMessages[key].photo),\r\n                <li className=\"chat-players-item\" key={key}>\r\n                  <img\r\n                    src={chatMessages[key].photo ? `${uploads}/users/${chatMessages[key].photo}` : `${uploads}/users/user.png`}\r\n                    alt={`user-${key}-photo`}\r\n                    className=\"chat-players-item-image\"\r\n                    onClick={() => handleChatPlayerClick(key)}\r\n                  />\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div id=\"current-chat\">\r\n              <div id='current-chat-label'>\r\n                {chatMessages && chatMessages[messageId] && chatMessages[messageId].photo ? <img src={`${uploads}/users/${chatMessages[messageId].photo}`}/> : <img src={`${uploads}/users/user.png`} alt={'user-1-photo'} id=\"current-chat-label-image\" />}\r\n              </div>\r\n              <ul id=\"chat-messages\" ref={chatMessagesRef}>\r\n                {console.log(\"FOTO DO USUÁRIO: \", chatMessages[messageId])}\r\n                {chatMessages && chatMessages[messageId] && Object.keys(chatMessages[messageId]).map((key, index, messageIds) => {\r\n                  if (key != 'photo') {\r\n                    const currentMessage = chatMessages[messageId][key];\r\n                    const isCurrentUserMessage = currentMessage.sender === userId;\r\n                    const nextMessageKey = messageIds[index + 1];\r\n                    const nextMessage = nextMessageKey ? chatMessages[messageId][nextMessageKey] : null;\r\n                    const shouldAddBorderClass = !isCurrentUserMessage && nextMessage && nextMessage.sender !== userId;\r\n  \r\n                    return(\r\n                      <li\r\n                        key={key}\r\n                        className={`chat-item ${isCurrentUserMessage ? 'current-user-message' : 'other-user-message'}\r\n                        ${shouldAddBorderClass ? 'chat-item-border-bottom' : ''}`}\r\n                      >\r\n                        <p className='chat-item-time-label'>{getDateFromMilliseconds(key)}</p>\r\n                        {currentMessage.message}\r\n                      </li>\r\n                    );\r\n                  }\r\n                })}\r\n              </ul>\r\n              <input\r\n                type=\"text\"\r\n                id='message-input'\r\n                value={newMessage || ''}\r\n                placeholder='Digite aqui...'\r\n                onChange={handleMessageChange}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    e.preventDefault(); // Prevent the default form submission\r\n                    handleMessageSubmit(); // Call your submit function here\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <button id=\"chat-button\" onClick={toggleChat}>\r\n          <BsChatDots id='chat-icon'/>\r\n          <div className='chat-unread-messages-count'>\r\n            {unreadMessagesCount}\r\n          </div>\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}