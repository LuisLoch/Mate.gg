{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport notificationService from \"../services/notificationService\";\nconst initialState = {\n  notifications: [],\n  error: false,\n  success: false,\n  loading: false,\n  message: null\n};\n\n//get user notifications\nexport const listNotifications = createAsyncThunk(\"notification/list\", async id => {\n  const data = await notificationService.listNotifications(id);\n  return data;\n});\nexport const notificationSlice = createSlice({\n  name: \"notification\",\n  initialState,\n  reducers: {\n    resetNotifications: state => {\n      state.notifications = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(listNotifications.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(listNotifications.fulfilled, (state, action) => {\n      state.loading = false;\n      state.success = true;\n      state.error = null;\n      state.notifications = action.payload;\n    });\n  }\n});\nexport const {\n  resetNotifications\n} = notificationSlice.actions;\nexport default notificationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","notificationService","initialState","notifications","error","success","loading","message","listNotifications","id","data","notificationSlice","name","reducers","resetNotifications","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","actions","reducer"],"sources":["C:/Users/empan/Desktop/CONTEUDO_DA_FACUL/Trabalho de conclusÃ£o de curso/TCC/frontend/src/slices/notificationSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport notificationService from \"../services/notificationService\";\r\n\r\nconst initialState = {\r\n  notifications: [],\r\n  error: false,\r\n  success: false,\r\n  loading: false,\r\n  message: null,\r\n};\r\n\r\n//get user notifications\r\nexport const listNotifications = createAsyncThunk(\r\n  \"notification/list\",\r\n  async (id) => {\r\n    const data = await notificationService.listNotifications(id);\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const notificationSlice = createSlice({\r\n  name: \"notification\",\r\n  initialState,\r\n  reducers: {\r\n    resetNotifications: (state) => {\r\n      state.notifications = [];\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(listNotifications.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(listNotifications.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.success = true;\r\n        state.error = null;\r\n        state.notifications = action.payload;\r\n      })\r\n  },\r\n});\r\n\r\nexport const { resetNotifications } = notificationSlice.actions;\r\nexport default notificationSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,mBAAmB,MAAM,iCAAiC;AAEjE,MAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,EAAE;EACjBC,KAAK,EAAE,KAAK;EACZC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGR,gBAAgB,CAC/C,mBAAmB,EACnB,MAAOS,EAAE,IAAK;EACZ,MAAMC,IAAI,GAAG,MAAMT,mBAAmB,CAACO,iBAAiB,CAACC,EAAE,CAAC;EAE5D,OAAOC,IAAI;AACb,CACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGZ,WAAW,CAAC;EAC3Ca,IAAI,EAAE,cAAc;EACpBV,YAAY;EACZW,QAAQ,EAAE;IACRC,kBAAkB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACZ,aAAa,GAAG,EAAE;IAC1B;EACF,CAAC;EACDa,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACV,iBAAiB,CAACW,OAAO,EAAGJ,KAAK,IAAK;MAC7CA,KAAK,CAACT,OAAO,GAAG,IAAI;MACpBS,KAAK,CAACX,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDc,OAAO,CAACV,iBAAiB,CAACY,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACvDN,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACV,OAAO,GAAG,IAAI;MACpBU,KAAK,CAACX,KAAK,GAAG,IAAI;MAClBW,KAAK,CAACZ,aAAa,GAAGkB,MAAM,CAACC,OAAO;IACtC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAmB,CAAC,GAAGH,iBAAiB,CAACY,OAAO;AAC/D,eAAeZ,iBAAiB,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}