{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\empan\\\\Desktop\\\\CONTEUDO_DA_FACUL\\\\Trabalho de conclus\\xE3o de curso\\\\Mate.gg\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './Chat.css';\n\n//Chat server\nimport io from 'socket.io-client';\n\n//Uploads\nimport { uploads } from '../utils/config';\n\n//Icons\nimport { BsX, BsChatDots } from 'react-icons/bs';\n\n//Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearNewUserChat, profile } from '../slices/userSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    user,\n    newUserChat\n  } = useSelector(state => state.user);\n  const chatMessagesRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [unreadMessages, setUnreadMessages] = useState(false);\n  const [chatMessages, setChatMessages] = useState({});\n  const [messageId, setMessageId] = useState('');\n  const [newMessage, setNewMessage] = useState(null);\n  const [userId, setUserId] = useState(null);\n  useEffect(() => {\n    dispatch(profile());\n  }, [dispatch]);\n\n  //Creates and sets the socket variable, and sets the disconnection from socket when the component is dismounted\n  useEffect(() => {\n    const newSocket = io('http://localhost:4000', {\n      withCredentials: true\n    });\n    setSocket(newSocket);\n    return () => {\n      //Disconnect from server when Chat.js is dismounted\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n\n  //Sets the userId variable when the Redux store returns the user object\n  useEffect(() => {\n    if (user) {\n      setUserId(user.id);\n    }\n  }, [user]);\n\n  //useEffect for when the userId or the socket variable change\n  useEffect(() => {\n    if (userId && socket) {\n      //Emits a get-messages, when the socket or the userId changes, and only if they exist\n      socket.emit('join', userId);\n      socket.emit('get-messages');\n\n      //If the server emits a message\n      socket.on('messages', messages => {\n        console.log(\"chatMessages: \", messages);\n        setChatMessages(messages); //Sets the chatMessages with the messages received from the server\n        setUnreadMessages(messages.notification);\n      });\n\n      //If the server emits a refresh message\n      socket.on('refresh', () => {\n        socket.emit('get-messages'); //Refreshes the user messages\n      });\n\n      //If the server requires login for some reason\n      socket.on('login-necessary', () => {\n        console.log(\"SERVIDOR REQUISITOU LOGIN\");\n        socket.emit('join', userId); //Log the current user in the server\n      });\n    }\n\n    return () => {\n      //Sets the manipulator off when the component gets dismounted\n      if (socket) {\n        socket.off('messages');\n        socket.off('refresh');\n        socket.off('login-necessary');\n      }\n    };\n  }, [userId, socket]);\n\n  //Toggle open/close chat\n  const toggleChat = () => {\n    if (user.email && socket) {\n      setIsOpen(!isOpen);\n      socket.emit('notify', {\n        user: user.id,\n        value: false\n      });\n      if (messageId == '' && chatMessages) {\n        //If the chat has no messageId to list the messages from a single user and the chatMessages isn't empty\n        setMessageId(Object.keys(chatMessages)[0]); //Sets the messageId from the first element of the messages\n      }\n    }\n  };\n\n  //Scrolls the chat till the end when it opens\n  useEffect(() => {\n    if (isOpen && chatMessages) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [isOpen, chatMessages]);\n\n  //useEffect for when the newUserChat variable from Redux store changes\n  useEffect(() => {\n    if (newUserChat && socket) {\n      //If a newUserChat and a socket exist\n      var canStartChat = true;\n      Object.keys(chatMessages).forEach(key => {\n        //Only starts the chat if there is no other messageId equal to the newUserChat.id\n        if (key == newUserChat.id) {\n          canStartChat = false;\n        }\n      });\n      if (canStartChat == true) {\n        console.log(\"INICIOU UM NOVO CHAT: \", newUserChat);\n        socket.emit('start-chat', {\n          targetUser: newUserChat.id,\n          userPhoto: user.photo,\n          targetPhoto: newUserChat.photo\n        });\n      }\n    }\n    dispatch(clearNewUserChat());\n  }, [newUserChat]);\n\n  //Handles a message change for the message input\n  const handleMessageChange = e => {\n    setNewMessage(e.target.value);\n  };\n\n  //Handles a player in the chat click\n  const handleChatPlayerClick = playerId => {\n    setMessageId(playerId);\n  };\n\n  //Handles a message submit from the message input\n  const handleMessageSubmit = e => {\n    if (socket && userId) {\n      if (messageId && chatMessages[messageId]) {\n        console.log(\"messageId: \", messageId);\n        socket.emit('send-message', {\n          message: newMessage,\n          targetUser: messageId,\n          userPhoto: user.photo\n        });\n        setNewMessage(null);\n        console.log(\"messageId: \", messageId);\n      }\n    }\n  };\n  const getDateFromMilliseconds = stringMilliseconds => {\n    const milliseconds = parseInt(stringMilliseconds, 10);\n    const date = new Date(milliseconds);\n    const minute = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n    const hour = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n    const month = date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth();\n    const year = date.getFullYear();\n    const formattedDate = `${day}/${month}/${year} ${hour}:${minute}`;\n    return formattedDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-component\",\n    className: `${isOpen ? 'open' : 'closed'}`,\n    children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"chat-close-button\",\n        onClick: toggleChat,\n        children: /*#__PURE__*/_jsxDEV(BsX, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"chat-players\",\n          children: chatMessages && messageId && Object.keys(chatMessages).map((key, index, messageIds) => key !== 'notification' && /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"chat-players-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: chatMessages[key].photo ? `${uploads}/users/${chatMessages[key].photo}` : `${uploads}/users/user.png`,\n              alt: `user-${key}-photo`,\n              className: \"chat-players-item-image\",\n              onClick: () => handleChatPlayerClick(key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }, this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"current-chat\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"current-chat-label\",\n            children: chatMessages && chatMessages[messageId] ? true && chatMessages[messageId].photo ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${uploads}/users/${chatMessages[messageId].photo}`,\n              id: \"current-chat-label-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${uploads}/users/user.png`,\n              id: \"current-chat-label-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 25\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            id: \"chat-messages\",\n            ref: chatMessagesRef,\n            children: chatMessages && chatMessages[messageId] && Object.keys(chatMessages[messageId]).map((key, index, messageIds) => {\n              if (key !== 'photo') {\n                const currentMessage = chatMessages[messageId][key];\n                const isCurrentUserMessage = currentMessage.sender === userId;\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: `chat-item ${isCurrentUserMessage ? 'current-user-message' : 'other-user-message'}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"chat-item-time-label\",\n                    children: getDateFromMilliseconds(key)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 25\n                  }, this), currentMessage.message]\n                }, key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 23\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"message-input\",\n            value: newMessage || '',\n            placeholder: \"Digite aqui...\",\n            onChange: handleMessageChange,\n            onKeyDown: e => {\n              if (e.key === 'Enter') {\n                e.preventDefault(); // Prevent the default form submission\n                handleMessageSubmit(); // Call your submit function here\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chat-button\",\n      onClick: toggleChat,\n      children: [/*#__PURE__*/_jsxDEV(BsChatDots, {\n        id: \"chat-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), unreadMessages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-unread-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${uploads}/exclamation_mark.png`,\n          alt: \"chat-exclamation-mark\",\n          id: \"chat-exclamation-mark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"DQnreiwa6khk1U+CMHWBV5/GXiM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","uploads","BsX","BsChatDots","useDispatch","useSelector","clearNewUserChat","profile","jsxDEV","_jsxDEV","Chat","_s","dispatch","user","newUserChat","state","chatMessagesRef","socket","setSocket","isOpen","setIsOpen","unreadMessages","setUnreadMessages","chatMessages","setChatMessages","messageId","setMessageId","newMessage","setNewMessage","userId","setUserId","newSocket","withCredentials","disconnect","id","emit","on","messages","console","log","notification","off","toggleChat","email","value","Object","keys","current","scrollTop","scrollHeight","canStartChat","forEach","key","targetUser","userPhoto","photo","targetPhoto","handleMessageChange","e","target","handleChatPlayerClick","playerId","handleMessageSubmit","message","getDateFromMilliseconds","stringMilliseconds","milliseconds","parseInt","date","Date","minute","getMinutes","hour","getHours","day","getDate","month","getMonth","year","getFullYear","formattedDate","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","messageIds","src","alt","ref","currentMessage","isCurrentUserMessage","sender","type","placeholder","onChange","onKeyDown","preventDefault","_c","$RefreshReg$"],"sources":["C:/Users/empan/Desktop/CONTEUDO_DA_FACUL/Trabalho de conclusão de curso/Mate.gg/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './Chat.css';\r\n\r\n//Chat server\r\nimport io from 'socket.io-client';\r\n\r\n//Uploads\r\nimport {uploads} from '../utils/config'\r\n\r\n//Icons\r\nimport { BsX, BsChatDots } from 'react-icons/bs'\r\n\r\n//Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearNewUserChat, profile } from '../slices/userSlice';\r\n\r\nconst Chat = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {user, newUserChat} = useSelector((state) => state.user);\r\n\r\n  const chatMessagesRef = useRef(null);\r\n\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [unreadMessages, setUnreadMessages] = useState(false);\r\n  const [chatMessages, setChatMessages] = useState({});\r\n  const [messageId, setMessageId] = useState('');\r\n  const [newMessage, setNewMessage] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    dispatch(profile());\r\n  }, [dispatch])\r\n\r\n  //Creates and sets the socket variable, and sets the disconnection from socket when the component is dismounted\r\n  useEffect(() => {\r\n    const newSocket = io('http://localhost:4000', {\r\n      withCredentials: true,\r\n    });\r\n    setSocket(newSocket);\r\n\r\n    return () => { //Disconnect from server when Chat.js is dismounted\r\n      if (socket) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  //Sets the userId variable when the Redux store returns the user object\r\n  useEffect(() => {\r\n    if (user) {\r\n      setUserId(user.id);\r\n    }\r\n  }, [user]);\r\n\r\n  //useEffect for when the userId or the socket variable change\r\n  useEffect(() => {\r\n    if (userId && socket) { //Emits a get-messages, when the socket or the userId changes, and only if they exist\r\n      socket.emit('join', userId);\r\n      socket.emit('get-messages');\r\n \r\n      //If the server emits a message\r\n      socket.on('messages', (messages) => {\r\n        console.log(\"chatMessages: \", messages)\r\n        setChatMessages(messages); //Sets the chatMessages with the messages received from the server\r\n        setUnreadMessages(messages.notification)\r\n      });\r\n\r\n      //If the server emits a refresh message\r\n      socket.on('refresh', () => {\r\n        socket.emit('get-messages'); //Refreshes the user messages\r\n      });\r\n\r\n      //If the server requires login for some reason\r\n      socket.on('login-necessary', () => {\r\n        console.log(\"SERVIDOR REQUISITOU LOGIN\")\r\n        socket.emit('join', userId); //Log the current user in the server\r\n      })\r\n    } \r\n\r\n    return () => { //Sets the manipulator off when the component gets dismounted\r\n      if (socket) {\r\n        socket.off('messages');\r\n        socket.off('refresh');\r\n        socket.off('login-necessary');\r\n      }\r\n    };\r\n  }, [userId, socket]);\r\n\r\n  //Toggle open/close chat\r\n  const toggleChat = () => {\r\n    if(user.email && socket) {\r\n      setIsOpen(!isOpen);\r\n      socket.emit('notify', {user: user.id, value: false})\r\n      \r\n      if(messageId == '' && chatMessages) { //If the chat has no messageId to list the messages from a single user and the chatMessages isn't empty\r\n        setMessageId(Object.keys(chatMessages)[0]); //Sets the messageId from the first element of the messages\r\n      }\r\n    }\r\n  };\r\n\r\n  //Scrolls the chat till the end when it opens\r\n  useEffect(() => {\r\n    if (isOpen && chatMessages) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [isOpen, chatMessages]);\r\n\r\n  //useEffect for when the newUserChat variable from Redux store changes\r\n  useEffect(() => {\r\n    if (newUserChat && socket) { //If a newUserChat and a socket exist\r\n      var canStartChat = true;\r\n      Object.keys(chatMessages).forEach((key) => { //Only starts the chat if there is no other messageId equal to the newUserChat.id\r\n        if(key == newUserChat.id) {\r\n          canStartChat = false;\r\n        }\r\n      })\r\n      if(canStartChat == true) {\r\n        console.log(\"INICIOU UM NOVO CHAT: \", newUserChat)\r\n        socket.emit('start-chat', { targetUser: newUserChat.id, userPhoto: user.photo, targetPhoto: newUserChat.photo});\r\n      }\r\n    }\r\n    dispatch(clearNewUserChat());\r\n  }, [newUserChat])\r\n\r\n  //Handles a message change for the message input\r\n  const handleMessageChange = (e) => {\r\n    setNewMessage(e.target.value);\r\n  };\r\n\r\n  //Handles a player in the chat click\r\n  const handleChatPlayerClick = (playerId) => {\r\n    setMessageId(playerId)\r\n  };\r\n\r\n  //Handles a message submit from the message input\r\n  const handleMessageSubmit = (e) => {\r\n    if(socket && userId) {\r\n      if(messageId && chatMessages[messageId]){\r\n        console.log(\"messageId: \", messageId);\r\n        socket.emit('send-message', { message: newMessage, targetUser: messageId, userPhoto: user.photo});\r\n  \r\n        setNewMessage(null)\r\n        console.log(\"messageId: \", messageId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getDateFromMilliseconds = (stringMilliseconds) => {\r\n    const milliseconds = parseInt(stringMilliseconds, 10);\r\n\r\n    const date = new Date(milliseconds);\r\n\r\n    const minute = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\r\n    const hour = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\r\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\r\n    const month = date.getMonth() < 9 ? `0${date.getMonth()+1}` : date.getMonth();\r\n    const year = date.getFullYear();\r\n\r\n    const formattedDate = `${day}/${month}/${year} ${hour}:${minute}`;\r\n\r\n    return formattedDate;\r\n  }\r\n\r\n  return (\r\n    <div id='chat-component' className={`${isOpen ? 'open' : 'closed'}`}>\r\n      {isOpen ? (\r\n        <div id=\"chat-window\">\r\n          <button id=\"chat-close-button\" onClick={toggleChat}>\r\n            <BsX/>\r\n          </button>\r\n          <div id='chat-list'>\r\n            <ul id='chat-players'>\r\n              {chatMessages && messageId && Object.keys(chatMessages).map((key, index, messageIds) => (\r\n                key !== 'notification' && (\r\n                  <li className=\"chat-players-item\" key={key}>\r\n                    <img\r\n                      src={chatMessages[key].photo ? `${uploads}/users/${chatMessages[key].photo}` : `${uploads}/users/user.png`}\r\n                      alt={`user-${key}-photo`}\r\n                      className=\"chat-players-item-image\"\r\n                      onClick={() => handleChatPlayerClick(key)}\r\n                    />\r\n                  </li>\r\n                )\r\n              ))}\r\n            </ul>\r\n            <div id=\"current-chat\">\r\n              <div id='current-chat-label'>\r\n                {\r\n                  chatMessages && chatMessages[messageId] \r\n                    ? true && chatMessages[messageId].photo\r\n                      ? <img src={`${uploads}/users/${chatMessages[messageId].photo}`} id=\"current-chat-label-image\"/>\r\n                      : <img src={`${uploads}/users/user.png`} id=\"current-chat-label-image\"/>\r\n                    : null\r\n                }\r\n              </div>\r\n              <ul id=\"chat-messages\" ref={chatMessagesRef}>\r\n                {chatMessages && chatMessages[messageId] && Object.keys(chatMessages[messageId]).map((key, index, messageIds) => {\r\n                  if (key !== 'photo') {\r\n                    const currentMessage = chatMessages[messageId][key];\r\n                    const isCurrentUserMessage = currentMessage.sender === userId;\r\n                    \r\n                    return(\r\n                      <li\r\n                        key={key}\r\n                        className={`chat-item ${isCurrentUserMessage ? 'current-user-message' : 'other-user-message'}`}\r\n                      >\r\n                        <p className='chat-item-time-label'>{getDateFromMilliseconds(key)}</p>\r\n                        {currentMessage.message}\r\n                      </li>\r\n                    );\r\n                  }\r\n                })}\r\n              </ul>\r\n              <input\r\n                type=\"text\"\r\n                id='message-input'\r\n                value={newMessage || ''}\r\n                placeholder='Digite aqui...'\r\n                onChange={handleMessageChange}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    e.preventDefault(); // Prevent the default form submission\r\n                    handleMessageSubmit(); // Call your submit function here\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <button id=\"chat-button\" onClick={toggleChat}>\r\n          <BsChatDots id='chat-icon'/>\r\n          {unreadMessages &&\r\n            <div className='chat-unread-messages'>\r\n              <img src={`${uploads}/exclamation_mark.png`} alt=\"chat-exclamation-mark\" id='chat-exclamation-mark'/>\r\n            </div>\r\n          }\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}